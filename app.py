# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PICA7bGiIVAv7lLP_JpKmvTT7y_Nl0rm
"""

import os
import requests
import nltk
from nltk.corpus import wordnet
import openai
from fastapi import FastAPI
from langchain.agents import initialize_agent, AgentType
from langchain.chat_models import ChatOpenAI
from langchain import hub

# Download NLTK data
nltk.download("wordnet")
nltk.download("omw-1.4")

# Set API Keys
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY  # Required for LangChain
DICTIONARY_API_URL = "https://api.dictionaryapi.dev/api/v2/entries/en/"

# Initialize FastAPI
app = FastAPI(title="AI-Powered Dictionary API", version="1.0")

# Initialize OpenAI LLM
llm = ChatOpenAI(model_name="gpt-4o", temperature=0, openai_api_key=OPENAI_API_KEY)

# Pull ReAct template from LangChain Hub
react_prompt = hub.pull("hwchase17/react-chat")

# Define tools
def fetch_word_data(word: str):
    response = requests.get(DICTIONARY_API_URL + word)
    if response.status_code == 200:
        data = response.json()[0]
        return {
            "definition": data['meanings'][0]['definitions'][0]['definition'],
            "phonetics": data.get('phonetics', [{}])[0].get('text', "N/A"),
            "etymology": data.get('origin', "No etymology available")
        }
    return {"error": "Word not found"}

def fetch_synonyms(word: str):
    synonyms = set()
    for syn in wordnet.synsets(word):
        for lemma in syn.lemmas():
            synonyms.add(lemma.name().replace("_", " "))
    return {"synonyms": list(synonyms)[:5]}

def fetch_antonyms(word: str):
    antonyms = set()
    for syn in wordnet.synsets(word):
        for lemma in syn.lemmas():
            if lemma.antonyms():
                for antonym in lemma.antonyms():
                    antonyms.add(antonym.name().replace("_", " "))
    return {"antonyms": list(antonyms)[:5]}

def generate_example_sentence(word: str):
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": f"Provide an example sentence using the word '{word}'."}]
    )
    return {"example_sentence": response.choices[0].message["content"]}

# Initialize ReAct Agent
tools = [fetch_word_data, fetch_synonyms, fetch_antonyms, generate_example_sentence]
agent_executor = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    agent_kwargs={"prompt": react_prompt},
    verbose=True
)

@app.get("/")
def home():
    return {"message": "Welcome to the AI-Powered Dictionary API"}

@app.get("/define/{word}")
def define_word(word: str):
    """Fetches definition, synonyms, antonyms, and example sentence for a word."""
    return agent_executor.run(f"What is the meaning, synonyms, and antonyms of '{word}'?")